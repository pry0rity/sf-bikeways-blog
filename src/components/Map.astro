---
interface Props {
  height?: string;
  className?: string;
  showControls?: boolean;
}

const { height = "400px", className = "", showControls = true } = Astro.props;
---

<div
  id="map"
  class={`w-full ${className}`}
  style={`height: ${height}`}
  data-show-controls={showControls}
>
</div>

<script>
  // Load Leaflet CSS
  const link = document.createElement("link");
  link.href = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.css";
  link.rel = "stylesheet";
  document.head.appendChild(link);

  // Load Leaflet JS
  const script = document.createElement("script");
  script.src = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.js";
  script.onload = () => {
    // @ts-ignore
    const L = window.L;

    // Fix Leaflet default marker icons
    // @ts-ignore
    delete L.Icon.Default.prototype._getIconUrl;
    L.Icon.Default.mergeOptions({
      iconRetinaUrl:
        "https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png",
      iconUrl: "https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png",
      shadowUrl:
        "https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png",
    });

    // Initialize map
    const map = L.map("map").setView([37.7749, -122.4194], 13);

    // Add OpenStreetMap tiles
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: "© OpenStreetMap contributors",
    }).addTo(map);

    // Get showControls from data attribute
    const showControls =
      document.getElementById("map")?.getAttribute("data-show-controls") ===
      "true";

    // Load routes from JSON
    fetch("/data/routes.json")
      .then((response) => {
        if (!response.ok) throw new Error("Failed to load /data/routes.json");
        return response.json();
      })
      .then((routes) => {
        console.log("Loaded routes:", routes);
        if (!Array.isArray(routes) || routes.length === 0) {
          console.warn("No routes found in /data/routes.json");
          return;
        }

        // Create a map to store route layers
        const routeLayers = new Map();

        routes.forEach((route) => {
          const geojson = route.geojson;
          if (!geojson || !geojson.geometry || !geojson.geometry.coordinates) {
            console.warn("Invalid geojson for route:", route);
            return;
          }
          const layer = L.geoJSON(geojson, {
            style: {
              color: "#008000",
              weight: 4,
              opacity: 0.7,
            },
          });

          // Store the layer with the route ID
          routeLayers.set(route.id, layer);

          // Add hover effects
          layer.on({
            mouseover: () => {
              layer.setStyle({ color: "#00ff00", weight: 6 });
              if (showControls) {
                const popup = L.popup().setLatLng(
                  geojson.geometry.coordinates[0]
                ).setContent(`
                    <div class="p-2">
                      <h3 class="font-medium">${route.title}</h3>
                      <p class="text-sm text-gray-600">
                        ${(route.distance / 1000).toFixed(1)}km • 
                        ${Math.round(route.elevation)}m elevation
                      </p>
                    </div>
                  `);
                layer.bindPopup(popup).openPopup();
              }
            },
            mouseout: () => {
              layer.setStyle({ color: "#008000", weight: 4 });
              if (showControls) {
                layer.closePopup();
              }
            },
            click: () => {
              window.location.href = route.blogUrl;
            },
          });

          layer.addTo(map);
        });

        // Listen for hover events from route cards
        document.addEventListener("routeCardHover", (e: Event) => {
          const customEvent = e as CustomEvent<{
            routeId: number;
            isHovering: boolean;
          }>;
          const routeId = customEvent.detail.routeId;
          const isHovering = customEvent.detail.isHovering;
          const layer = routeLayers.get(routeId);

          if (layer) {
            if (isHovering) {
              layer.setStyle({ color: "#00ff00", weight: 6 });
              if (showControls) {
                const route = routes.find((r) => r.id === routeId);
                if (route) {
                  const popup = L.popup().setLatLng(
                    route.geojson.geometry.coordinates[0]
                  ).setContent(`
                    <div class="p-2">
                      <h3 class="font-medium">${route.title}</h3>
                      <p class="text-sm text-gray-600">
                        ${(route.distance / 1000).toFixed(1)}km • 
                        ${Math.round(route.elevation)}m elevation
                      </p>
                    </div>
                  `);
                  layer.bindPopup(popup).openPopup();
                }
              }
            } else {
              layer.setStyle({ color: "#008000", weight: 4 });
              if (showControls) {
                layer.closePopup();
              }
            }
          }
        });

        // Fit map to show all routes
        const allCoords = routes.flatMap(
          (route) => route.geojson?.geometry?.coordinates || []
        );
        if (allCoords.length > 0) {
          const bounds = L.latLngBounds(
            allCoords.map(([lng, lat]) => [lat, lng])
          );
          map.fitBounds(bounds, { padding: [50, 50] });
        } else {
          console.warn("No valid coordinates found in routes.");
        }
      })
      .catch((error) => console.error("Error loading routes:", error));
  };
  document.head.appendChild(script);
</script>

<style>
  .leaflet-container {
    width: 100%;
    height: 100%;
  }

  .leaflet-popup-content {
    margin: 0;
  }

  .leaflet-popup-content-wrapper {
    padding: 0;
    border-radius: 0.5rem;
  }
</style>
