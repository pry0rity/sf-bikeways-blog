---
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

const posts = await getCollection("blog");
const sortedPosts = posts.sort(
  (a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) =>
    new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);
---

<Layout title="pryority">
  <div class="space-y-24">
    <section class="space-y-6">
      <div class="space-y-2">
        <h1>pryority's priorities</h1>
        <p class="text-[var(--color-text)]/80 text-lg">
          i write about the things that keep me moving: cycling through san
          francisco's hills, building software that matters, and finding joy in
          the little moments.
        </p>
      </div>

      <div class="flex gap-4 text-sm text-[var(--color-text)]/60">
        <a href="https://github.com/pry0rity" class="link-hover">github</a>
        <a href="https://twitter.com/pry0rity" class="link-hover"
          >x (please don't hate me)</a
        >
        <a
          href="https://bsky.app/profile/pry0rity.bsky.social"
          class="link-hover">bsky</a
        >
      </div>
    </section>

    <section class="space-y-8">
      <div class="flex items-center gap-4">
        <h2>latest thoughts</h2>
        <div class="h-px flex-1 bg-[var(--color-text)]/10"></div>
      </div>

      <div class="space-y-16">
        {
          sortedPosts.map((post) => (
            <article class="group">
              <a href={`/blog/${post.slug}`} class="block space-y-3">
                <div class="space-y-1">
                  <h3 class="link-hover inline-block">{post.data.title}</h3>
                  <p class="text-[var(--color-text)]/60 leading-relaxed">
                    {post.data.description}
                  </p>
                </div>

                <div class="flex items-center gap-4 text-sm text-[var(--color-text)]/40">
                  <time>
                    {new Date(post.data.date).toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </time>
                  {post.data.tags && post.data.tags.length > 0 && (
                    <span class="flex gap-2">
                      {post.data.tags.map((tag: string) => (
                        <span class="link-hover text-xs">{tag}</span>
                      ))}
                    </span>
                  )}
                </div>
              </a>
            </article>
          ))
        }
      </div>
    </section>

    <section class="space-y-6">
      <div class="space-y-4 text-[var(--color-text)]/60 text-sm">
        <p class="flex items-center gap-2">
          currently reading: <span class="link-hover"
            >The Design of Everyday Things</span
          >
        </p>
      </div>

      <div class="rounded-lg overflow-hidden">
        <div id="spotify-placeholder" class="spotify-skeleton-loader"></div>
      </div>

      <div class="space-y-4">
        <button
          id="errorButton"
          class="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors"
        >
          Trigger Test Error
        </button>
      </div>
    </section>
  </div>
</Layout>

<script>
  document.getElementById("errorButton")?.addEventListener("click", () => {
    const error = new Error("Test error from pryority's blog");
    error.name = "TestError";
    error.stack = error.stack?.replace(/Error:/, "TestError:");
    throw error;
  });

  // Lazy load Spotify iframe
  const placeholder = document.getElementById("spotify-placeholder");
  if (placeholder && "IntersectionObserver" in window) {
    const observer = new IntersectionObserver(
      (entries, obs) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const iframe = document.createElement("iframe");
            iframe.src =
              "https://open.spotify.com/embed/album/3hXswlXaEoYMiBQ9TZN2wR";
            iframe.width = "100%";
            iframe.height = "352";
            iframe.frameBorder = "0";
            iframe.allow =
              "autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture";
            iframe.loading = "lazy";
            iframe.className = "rounded-lg";
            placeholder.replaceWith(iframe);
            obs.disconnect();
          }
        });
      },
      { threshold: 0.1 }
    );
    observer.observe(placeholder);
  }
</script>

<style>
  /* Add a subtle gradient to the background */
  :global(body) {
    background: linear-gradient(
      to bottom right,
      var(--color-bg),
      color-mix(in srgb, var(--color-accent) 2%, var(--color-bg))
    );
    background-attachment: fixed;
  }

  .spotify-skeleton-loader {
    width: 100%;
    height: 352px;
    background: #e5e7eb;
    border-radius: 0.5rem;
    animation: pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    display: block;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.4;
    }
  }
</style>
