---
import Layout from "../../../layouts/Layout.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  const years = Array.from(
    new Set(
      posts.map((post) => new Date(post.data.date).getFullYear().toString())
    )
  );
  return years.map((year) => ({ params: { year } }));
}

const { year } = Astro.params;
const posts = await getCollection("blog");

// Filter posts for the given year
const filteredPosts = posts.filter((post) => {
  const date = new Date(post.data.date);
  const postYear = date.getFullYear().toString();
  return postYear === year;
});
---

<Layout title={`Blog | ${year}`}>
  <div class="space-y-16">
    <section class="space-y-4">
      <h1>Blog: {year}</h1>
      <p class="text-[var(--color-text)]/60">
        All posts from {year}.
      </p>
    </section>

    <section class="space-y-12">
      {
        filteredPosts.length === 0 && (
          <p class="text-[var(--color-text)]/60">
            No posts found for this year.
          </p>
        )
      }
      {
        filteredPosts.map((post) => {
          const date = new Date(post.data.date);
          const month = date.toLocaleString("default", { month: "long" });
          const monthNum = String(date.getMonth() + 1).padStart(2, "0");
          return (
            <article class="group">
              <a
                href={`/blog/${year}/${monthNum}/${post.slug}`}
                class="block space-y-3"
              >
                <div class="space-y-1">
                  <h2 class="link-hover inline-block">{post.data.title}</h2>
                  <p class="text-[var(--color-text)]/60 leading-relaxed">
                    {post.data.description}
                  </p>
                </div>
                <div class="flex items-center gap-4 text-sm text-[var(--color-text)]/40">
                  <time>
                    {date.toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </time>
                  {post.data.tags && post.data.tags.length > 0 && (
                    <span class="flex gap-2">
                      {post.data.tags.map((tag) => (
                        <span class="inline-block rounded-full bg-gray-100 dark:bg-gray-800 px-2 py-0.5 text-xs font-medium text-[var(--color-text)]">
                          {tag}
                        </span>
                      ))}
                    </span>
                  )}
                </div>
              </a>
            </article>
          );
        })
      }
    </section>
  </div>
</Layout>
