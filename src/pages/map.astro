---
import Layout from "../layouts/Layout.astro";
import MapComponent from "../components/Map.astro";
import { readFileSync } from "fs";
import { join } from "path";

// Define the type for a route
type Route = {
  id: number;
  title: string;
  date: string;
  distance: number;
  elevation: number;
  duration: number;
  blogUrl: string;
  geojson: {
    type: string;
    geometry: {
      type: string;
      coordinates: number[][];
    };
    properties: Record<string, unknown>;
  };
};

// Load routes data
const routesFile = join(process.cwd(), "src", "data", "routes.json");
const routes: Route[] = JSON.parse(readFileSync(routesFile, "utf-8"));

// Calculate some stats
const totalDistance =
  routes.reduce((sum: number, route: Route) => sum + route.distance, 0) / 1000; // km
const totalElevation = routes.reduce(
  (sum: number, route: Route) => sum + route.elevation,
  0
); // meters
const totalRides = routes.length;
---

<Layout
  title="SF Bike Routes Map"
  description="Interactive map of all documented bike routes in San Francisco."
>
  <div class="space-y-8">
    <section class="space-y-4">
      <h1>SF Bike Routes Map</h1>
      <p class="text-[var(--color-text)]/80 text-lg">
        Explore all documented bike routes in San Francisco. Click on any route
        to view its details and read the full ride report.
      </p>
    </section>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <div class="p-4 rounded-lg border border-[var(--color-text)]/10">
        <h3 class="text-sm text-[var(--color-text)]/60">Total Rides</h3>
        <p class="text-2xl font-medium">{totalRides}</p>
      </div>
      <div class="p-4 rounded-lg border border-[var(--color-text)]/10">
        <h3 class="text-sm text-[var(--color-text)]/60">Total Distance</h3>
        <p class="text-2xl font-medium">{totalDistance.toFixed(1)} km</p>
      </div>
      <div class="p-4 rounded-lg border border-[var(--color-text)]/10">
        <h3 class="text-sm text-[var(--color-text)]/60">Total Elevation</h3>
        <p class="text-2xl font-medium">{Math.round(totalElevation)} m</p>
      </div>
    </div>

    <div
      class="rounded-lg overflow-hidden border border-[var(--color-text)]/10"
    >
      <MapComponent height="600px" />
    </div>

    <section class="space-y-4">
      <h2>Recent Rides</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {
          routes.slice(0, 6).map((route: Route) => (
            <a
              href={route.blogUrl}
              class="p-4 rounded-lg border border-[var(--color-text)]/10 hover:border-[var(--color-text)]/20 transition-colors route-card"
              data-route-id={route.id}
            >
              <h3 class="link-hover inline-block">{route.title}</h3>
              <p class="text-sm text-[var(--color-text)]/60 mt-1">
                {(route.distance / 1000).toFixed(1)}km â€¢{" "}
                {Math.round(route.elevation)}m elevation
              </p>
              <p class="text-sm text-[var(--color-text)]/60">
                {new Date(route.date).toLocaleDateString()}
              </p>
            </a>
          ))
        }
      </div>
    </section>
  </div>
</Layout>

<script>
  // Add hover event listeners to route cards
  document.querySelectorAll(".route-card").forEach((card) => {
    card.addEventListener("mouseenter", () => {
      const routeId = parseInt(card.getAttribute("data-route-id") || "0");
      const event = new CustomEvent("routeCardHover", {
        detail: { routeId, isHovering: true },
      });
      document.dispatchEvent(event);
    });

    card.addEventListener("mouseleave", () => {
      const routeId = parseInt(card.getAttribute("data-route-id") || "0");
      const event = new CustomEvent("routeCardHover", {
        detail: { routeId, isHovering: false },
      });
      document.dispatchEvent(event);
    });
  });
</script>
