---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const rides = await getCollection("rides");
  return rides.map((ride) => ({
    params: { slug: ride.slug },
    props: { ride },
  }));
}

type Props = {
  ride: CollectionEntry<"rides">;
};

const { ride } = Astro.props;
const { Content } = await ride.render();
const date = new Date(ride.data.date);
const year = date.getFullYear();
const month = date.toLocaleString("default", { month: "long" });
---

<Layout title={ride.data.title}>
  <article class="space-y-8">
    <header class="space-y-4">
      <h1>{ride.data.title}</h1>
      <p class="text-lg text-[var(--color-text)]/80">
        {ride.data.description}
      </p>
      <nav class="text-sm text-[var(--color-text)]/60">
        <ol class="flex gap-2">
          <li><a href="/rides" class="link-hover">Rides</a></li>
          <li>/</li>
          <li><a href={`/rides/${year}`} class="link-hover">{year}</a></li>
          <li>/</li>
          <li>
            <a
              href={`/rides/${String(date.getMonth() + 1).padStart(2, "0")}`}
              class="link-hover">{month}</a
            >
          </li>
          <li>/</li>
          <li class="text-[var(--color-text)]">{ride.data.title}</li>
        </ol>
      </nav>
      <div class="flex items-center gap-4 text-sm text-[var(--color-text)]/60">
        <time datetime={ride.data.date.toISOString()}>
          {
            ride.data.date.toLocaleDateString("en-US", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })
          }
        </time>
        <span>{(ride.data.distance / 1000).toFixed(1)}km</span>
        <span>{Math.round(ride.data.elevation)}m elevation</span>
        <span>{Math.round(ride.data.duration / 60)} minutes</span>
      </div>
    </header>

    <div class="prose">
      <Content />
    </div>

    <div class="mt-8 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
      <h2 class="text-lg font-medium mb-4">Route Map</h2>
      <div id="map" class="h-[400px] rounded-lg"></div>
    </div>
  </article>
</Layout>

<script is:inline define:vars={{ rideData: ride.data }}>
  // Load Mapbox GL JS
  const script = document.createElement("script");
  script.src = "https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js";
  script.onload = () => {
    // Access mapboxgl from window
    const mapboxgl = window.mapboxgl;
    mapboxgl.accessToken = import.meta.env.PUBLIC_MAPBOX_TOKEN;

    // Determine if dark mode is active
    const isDarkMode = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;

    const map = new mapboxgl.Map({
      container: "map",
      style: isDarkMode
        ? "mapbox://styles/mapbox/dark-v11"
        : "mapbox://styles/mapbox/light-v11",
      center: rideData.geojson.geometry.coordinates[0],
      zoom: 14,
      attributionControl: false,
    });

    // Add attribution control
    map.addControl(
      new mapboxgl.AttributionControl({
        compact: true,
      })
    );

    map.on("load", () => {
      map.addSource("route", {
        type: "geojson",
        data: rideData.geojson,
      });

      map.addLayer({
        id: "route",
        type: "line",
        source: "route",
        layout: {
          "line-join": "round",
          "line-cap": "round",
        },
        paint: {
          "line-color": isDarkMode ? "#60a5fa" : "#3b82f6",
          "line-width": 4,
          "line-opacity": 0.8,
        },
      });

      // Add start and end markers
      const coordinates = rideData.geojson.geometry.coordinates;
      const start = coordinates[0];
      const end = coordinates[coordinates.length - 1];

      // Add start marker
      new mapboxgl.Marker({ color: "#22c55e" }).setLngLat(start).addTo(map);

      // Add end marker
      new mapboxgl.Marker({ color: "#ef4444" }).setLngLat(end).addTo(map);

      // Fit bounds to show the entire route
      const bounds = coordinates.reduce(
        (bounds, coord) => {
          return bounds.extend(coord);
        },
        new mapboxgl.LngLatBounds(coordinates[0], coordinates[0])
      );

      map.fitBounds(bounds, {
        padding: 50,
        maxZoom: 16,
      });
    });

    // Listen for theme changes
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (e) => {
        map.setStyle(
          e.matches
            ? "mapbox://styles/mapbox/dark-v11"
            : "mapbox://styles/mapbox/light-v11"
        );
      });
  };
  document.head.appendChild(script);

  // Load Mapbox GL CSS
  const link = document.createElement("link");
  link.href = "https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css";
  link.rel = "stylesheet";
  document.head.appendChild(link);
</script>

<style>
  :global(.prose) {
    max-width: 65ch;
    margin: 0 auto;
  }
  :global(.prose img) {
    border-radius: 0.5rem;
  }
  :global(.prose p) {
    margin-bottom: 1.5em;
  }
</style>
